#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup create migrate cicd help"
  elif [ "${2}" = "migrate" ]
  then
    shortlist3="from"
    if [ -z "${3}" ] || [[ ! " ${shortlist3} " == *" ${3} "* ]]
    then
      echo "${shortlist3}"
    fi
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions

# $1: optional setup
function doSetup() {
  export JAVA_HOME="${DEVON_IDE_HOME}/software/java"
  local version="${JAVA_VERSION:-11.0.13_8}"
  doSetupJava "${1}" "${version}" "${DEVON_IDE_HOME}/software" "Java"
  if [ -n "${EXTRA_JAVA_VERSION}" ]
  then
    if [ "${EXTRA_JAVA_VERSION}" = "${version}" ]
    then
      doConfirmWarning "You have configured EXTRA_JAVA_VERSION=${EXTRA_JAVA_VERSION} what is the same as JAVA_VERSION.\nThis does not make any sense. Please revisit your configuration."
    fi
    doSetupJava "${1}" "${EXTRA_JAVA_VERSION}" "${DEVON_IDE_HOME}/software/extra" "extra-Java"
  fi
}

# $1: mode (e.g. 'silent')
# $2: version
# $3: software path
# $4: label (e.g. 'extra Java')
function doSetupJava() {
  local mode="${1}"
  local version="${2}"
  local path="${3}"
  local javaLabel="${4}"
  local javaHome="${path}/java"
  if [ "${mode}" != "silent" ] || [ ! -d "${javaHome}" ]
  then
    local code
    if [ "${version:0:1}" = "8" ]
    then
      code="jdk${version/b/-b}"
    else
      code="jdk-${version/_/%2B}"
    fi
    doInstall "-" "${javaHome}" "java" "${version}" "" "${code}"
    if [ ! -d "${javaHome}/bin" ] && doIsMacOs && [ -d "${javaHome}/Contents" ]
    then
      doEcho "Creating symlink as workaround for ${javaLabel} on MacOS"
      local jdkHome="${path}/jdk"
      doRunCommand "rm -rf '${jdkHome}'"
      doRunCommand "mv '${javaHome}' '${jdkHome}'"
      doRunCommand "ln -sf 'jdk/Contents/Home' '${javaHome}'"
      doRunCommand "cp '${jdkHome}/.devon.software.version' '${javaHome}'"
    fi
    if [ "${javaHome}" = "${JAVA_HOME}" ]
    then
      doExtendPath "${JAVA_HOME}"
    fi
  fi
  if [ "${mode}" != "silent" ] && ! doIsQuiet
  then
    doRunCommand "'${javaHome}/bin/java' -version" "verify installation of ${javaLabel}"
  fi
}

#$@ args (see help)
function doMigrate() {
  doRunConfigurator com.devonfw.tools.ide.migrator.Migrator "${@}"
  exit ${?}
}

#$@ args (see help)
function doCreate() {
  if [ "$(dirname "${PWD}")" != "${DEVON_IDE_HOME}/workspaces" ]
  then
    doWarning "You are currently not directly in a workspace folder. Current location is:\n${PWD}"
    if doAskToContinue "Create project in main workspace instead?" "return"
    then
      cd "${DEVON_IDE_HOME}/workspaces/main" || exit 255
    fi
  fi

  local framework
  local mavenArgs
  local package
  local artifactId
  while [[ -n "${1}" ]]
  do
    if [[ "${1}" == "-f" ]] || [[ "${1}" == "-framework" ]]  
    then
      framework=${2}
      shift
    elif [[ "${1:0:8}" == "-Ddbtype" ]]
    then 
      dbtype=${1:9}
    elif [[ "${1:0:2}" == "-D" ]]
    then
      mavenargs="${mavenargs} ${1}"
    elif [[ "${1}" =~ [a-z]+[.][a-z]+([.][a-z]+)* ]]
    then 
      package="${package} ${1}"
    elif [[ "${1}" =~ [^.]* ]]
    then
      ## some better definition for a artifactID TODO
      artifactId+=${1}
    fi
    shift
  done

  while [[ -z "${framework}" ]] || [[ "${framework}" != "spring" ]] && [[ "${framework}" != "quarkus" ]]
  do
    if [[ -n ${package} ]]
    then
      framework="spring"
      break
    fi
    if [[ -z "${framework}" ]]
    then
      doEcho "No framework selected." 
    fi
    read -r -p "(Select a framework: 'quarkus' or 'spring'): " framework
  done

  echo $framework

  if [[ "${framework}" = "quarkus" ]]
  then
    startQuarkusProject ${dbtype}
  elif [[ "${framework}" = "spring" ]]
  then
    if [[ -z "${package}" ]] && [[ -z "${mavenargs}"  ]]
    then 
      doEcho "No package or other parameter passed, we need at least a package to create a spring application more information https://devonfw.com/website/pages/docs/devonfw-guide_ide.wiki_cli.asciidoc.html#devonfw-guide_ide.wiki_java.asciidoc_create" 
      read -r -p "Pass a package and optional parameters as shown in the examples: " mavenargs
    fi
    doMavenArchetype ${package} ${mavenargs} ${dbtype} ${artifactId}
  fi
  exit ${?}
}

# dbtype
function startQuarkusProject() {
  local message='\nPlease select your preferred extensions and set the project group-, artifactId-, and version
  on the opened site https://code.quarkus.io/ or just press return to use a configured project from our 
  templates guides with some extensions that we recommend to start with \n' 
  while [[ ! "$url" =~ ^https://code.quarkus.io/.* ]]
  do
    doEchoAttention -e "$message"
    read -r -p "(Copy the url and paste it here) The url has to start like this:https://code.quarkus.io/... or just press return to use our simple REST API template project" url
    if [[  -z "${url}" ]]
    then 
      url="https://code.quarkus.io/?g=com.devonfw.quarkus&e=resteasy&e=resteasy-jackson&e=hibernate-validator&e=hibernate-orm"
      break
    fi
  done

  local artifact=$(echo "${url}" | grep -o 'a=[^\&]*')
  if [[ -z "${artifact}" ]]
  then 
    artifact="myapp"
    url="${url}&a=${artifact}"
  else
    artifact=${artifact:2}
  fi  
  local group=$(echo "${url}" | grep -o 'g=[^\&]*')
  if [[ -z "${group}" ]]
  then 
    group="com.devonfw.quarkus"
    url="${url}&g=${group}"
  else
    group=${group:2}
  fi

  doEcho "Project will be created in workspaces/main folder"
  local database_arr=(postgresql mariadb mysql h2 mssql db2 derby oracle dynamodb mongodb redis)
  local database_extensions_arr=(e=jdbc-postgresql e=jdbc-mariadb e=jdbc-mysql e=jdbc-h2 e=jdbc-mssql e=jdbc-db2 e=jdbc-derby e=jdbc-oracle e=amazon-dynamodb e=mongodb-client e=redis-client)
  local database_extension
  if [[ -n "${1}" ]]
  then 
    for ((i=0; i< ${#database_arr[@]}; i++))
    do 
      if [[ "${1}" == "${database_arr[${i}]}" ]]
      then 
        database_extension="${database_extensions_arr[${i}]}" 
        url+="&${database_extension}&e=hibernate-orm"
      fi
    done
  fi
  if [[ -z "${database_extension}" ]] && [[ -n ${1} ]]
  then 
    doWarning "Dbtype ${1} is not supported, Project will be created regardless"
  fi

  subst=`expr substr $url 25 ${#url}`
  url="https://code.quarkus.io/d${subst}"

  extractedFolderBasePath="${DEVON_IDE_HOME}/updates/extracted/${artifact}"
  if [[ -d "${artifact}" ]]
  then 
    doFail "A project: ${artifact} already exists, make sure to delete the existing project or rename your new project and run the comment again"
  fi

  if [[ -e "${DEVON_IDE_HOME}/updates/quarkus.zip" ]]
  then 
    rm "${DEVON_IDE_HOME}/updates/quarkus.zip"
  fi 
  doDownload "${url}" "quarkus.zip" "${DEVON_IDE_HOME}/updates"

  doExtract "${DEVON_IDE_HOME}/updates/quarkus.zip"
  rm "${DEVON_IDE_HOME}/updates/quarkus.zip"

  local groupIdFolders="${group//[.]/"/"}"
  doCreateModernProjectStructure ${artifact} ${PWD} ${groupIdFolders}
  doMoveQuarkusFilesToModernStructure "${extractedFolderBasePath}/" "${PWD}/${artifact}/"

  ## cleanup
  rm -r "${extractedFolderBasePath}"
}

function doMoveQuarkusFilesToModernStructure() {
  ## mv dockerfolder can be moved 
  mv "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/main/docker" "${PWD}/${artifact}/src/main"
  ## resoruces folder can be moved
  mv "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/main/resources" "${PWD}/${artifact}/src/main"

  if [ -d "${extractedFolderBasePath}/src/test/resources" ]
  then 
    mv "${extractedFolderBasePath}/src/test/resources" "${PWD}/${artifact}/src/test/"
  fi

  ##files=`eval find "${extractedFolderBasePath}/*" -type f`
  restFiles=$(grep --with-filename '@Path' -r "${extractedFolderBasePath}/")
  if [[ -n $restFiles ]]
  then 
    mv ${restFiles/:@Path*} "${PWD}/${artifact}/src/main/java/${groupIdFolders}/${artifact}/rest/v1"
  fi

  testFiles=`eval find '${extractedFolderBasePath}/src/test/*' -type f`
  if [[ -n $testFiles ]]
  then
    mkdir -p "${PWD}/${artifact}/test/java/${groupIdFolders}/${artifact}/rest/v1"
    mv ${testFiles} "${PWD}/${artifact}/test/java/${groupIdFolders}/${artifact}/rest/v1" 
  fi

  projectFiles=`eval find "${extractedFolderBasePath}/" -maxdepth 1 -type f `
  if [[ -n $projectFiles ]]
  then 
    mv ${projectFiles} "${DEVON_IDE_HOME}/updates/extracted/${artifact}/.mvn" "${PWD}/${artifact}/"
  fi

  otherFiles=`eval find "${extractedFolderBasePath}/" -type f`
  if [[ -n $otherFiles ]]
  then 
    mkdir -p "${PWD}/${artifact}/otherFiles"
    doEchoAttention "We have found some files provided by Quarkus that couldn't be assigned to our project structure, we moved them into otherFiles folder and you have to relocate them by yourself"
    mv ${otherFiles} "${PWD}/${artifact}/otherFiles"
  fi
}


#1 artifactId
#2 path where the project will be created 
#3 groupId
function doCreateModernProjectStructure() {
  local projectBasePath="${2}/${1}/src/main"
  mkdir -p "${projectBasePath}" "${projectBasePath}/helm" "${projectBasePath}/java" "${projectBasePath}/java/${3}/general/domain/model" 
  mkdir -p "${projectBasePath}/java/${3}/${1}/domain/repo" "${projectBasePath}/java/${3}/${1}/domain/dao" "${projectBasePath}/java/${3}/${1}/domain/model"
  mkdir -p "${projectBasePath}/java/${3}/${1}/logic" "${projectBasePath}/java/${3}/${1}/rest/v1/mapper" "${projectBasePath}/java/${3}/${1}/rest/v1/model"
  mkdir -p "${projectBasePath}/java/${3}/${1}/rest/v1"
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Install and manage Java."
  echo
  echo "Arguments:"
  echo " setup                              setup Java (install and verify)"
  echo " create «args»                      create new Java project based on devon4j template. If a single argument is provided,"
  echo "                                    this is the package name and is automatically split into groupId and artifactId and creates a spring project. "
  echo "                                    You can choose between the 'spring' or 'quarkus' framework with the -f or -framework parameter. Use "
  echo "                                    -DdbType=«db» to choose the database. Any option starting with dash is passed as is for spring."
  echo "                                    To create a Quarkus project you have to provide a link from https://code.quarkus.io/"
  echo " migrate [from «version»] [single]  update the current devon4j project to the latest supported version. If for some reasons"
  echo "                                    the current devonfw version (e.g. oasp4j:2.6.0) can not be auto-detected you may provide"
  echo "                                    it manually after the 'from' argument. Also the 'single' option allows to migrate only to"
  echo "                                    the next available version."
  echo " cicd «args»                        generate cicd files for the current project: $PWD"
  echo
  echo "Options:"
elif [ -z "${1}" ] || [ "${1}" = "setup" ]
then
  doSetup "${2}"
elif [ "${1}" = "create" ]
then
  doSetup silent
  shift
  doCreate "${@}"
elif [ "${1}" = "migrate" ]
then
  shift
  doMigrate "${@}"
elif [ "${1}" = "cicd" ]
then
  shift
  doDevonCommand cicdgen java "${*}"
else
  doFail "Unknown argument ${1}"
fi
