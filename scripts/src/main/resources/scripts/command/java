#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup create migrate cicd help"
  elif [ "${2}" = "migrate" ]
  then
    shortlist3="from"
    if [ -z "${3}" ] || [[ ! " ${shortlist3} " == *" ${3} "* ]]
    then
      echo "${shortlist3}"
    fi
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions

# $1: optional setup
function doSetup() {
  if [ -z "${JAVA_HOME}" ]
  then
    export JAVA_HOME="${DEVON_IDE_HOME}/software/java"
    echo "JAVA_HOME is not set, assuming ${JAVA_HOME}"
  fi
  if [ -n "${1}" ] || [ ! -d "${JAVA_HOME}" ]
  then
    local software_version="${JAVA_VERSION:-11.0.9.1_1}"
    local major_version="${software_version/\.*/}"
    major_version="${major_version/u*/}"
    local jdk_folder="jdk-${software_version/_/%2B}"
    if [ "${major_version}" = "8" ]
    then
      software_version="${software_version/_/b}"
      local jdk_folder="jdk${software_version/b/-b}"
    fi
    local os
    local extension=".tar.gz"
    local software_dir="${JAVA_HOME}"
    if doIsMacOs
    then
      os="mac"
      software_dir="${DEVON_IDE_HOME}/software/jdk"
    elif doIsWindows
    then
      os="windows"
      extension=".zip"
    else
      os="linux"
    fi
    local download_url="https://github.com/AdoptOpenJDK/openjdk${major_version}-binaries/releases/download/${jdk_folder}/OpenJDK${major_version}U-jdk_x64_${os}_hotspot_${software_version}${extension}"
    doInstall "${software_dir}" "${download_url}" "java" "${software_version}"
    if [ ! -d "${JAVA_HOME}" ] && [ -d "${DEVON_IDE_HOME}/software/jdk" ] && [ "${software_dir}" = "${DEVON_IDE_HOME}/software/jdk" ]
    then
      echo "Creating symlink as workaround for Java on MacOS"
      doRunCommand "ln -sf 'jdk/Contents/Home' '${JAVA_HOME}'"
      doExtendPath "${JAVA_HOME}"
    fi
  fi
  if [ -n "${1}" ] && ! doIsQuiet
  then
    doRunCommand "'${JAVA_HOME}/bin/java' -version" "verify installation of Java"
  fi
}

#$@ args (see help)
function doMigrate() {
  doRunConfigurator com.devonfw.tools.ide.migrator.Migrator "${@}"
  exit ${?}
}

#$@ args (see help)
function doCreate() {
  if [ "$(dirname "${PWD}")" != "${DEVON_IDE_HOME}/workspaces" ]
  then
    doWarning "You are currently not directly in a workspace folder. Current location is:\n${PWD}"
    if doAskToContinue "Create project in main workspace instead?" "return"
    then
      cd "${DEVON_IDE_HOME}/workspaces/main" || exit 255
    fi
  fi

local framework
local mavenArgs
local package
local artifactId
while [[ -n "${1}" ]]
do
  if [[ "${1}" == "-f" ]] || [[ "${1}" == "-framework" ]]  
  then 
    if [[ "${2,,}" == "quarkus" ]]
    then 
      framework="quarkus"
      shift
    elif [[ "${2,,}" == "spring" ]]
    then 
      framework="spring"
      shift
    fi
  elif [[ "${1:0:8}" == "-Ddbtype" ]]
  then 
    dbtype=${1:9}
  elif [[ "${1:0:2}" == "-D" ]]
  then
      mavenargs="${mavenargs} ${1}"
      framework="spring"
  elif [[ "${1}" =~ [a-z]+[.][a-z]+([.][a-z]+)* ]]
  then 
      package="${package} ${1}"
      framework="spring"
  elif [[ "${1}" =~ [^.]* ]] 
  then
    ## some better definition for a atrifactID
      artifactId+=${1}
  else
      doFail "Wrong parameter for -f"
  fi
  shift
done

local getFramework=""
while [[ -z "$framework" ]]
  do
      echo "No Framework selected." 
      read -r -p "(Select a Framework: Quarkus or Spring): " getFramework
      if [[ "${getFramework,,}" = "quarkus" ]]
      then
        framework="quarkus"
      elif [[ "${getFramework,,}" = "spring" ]]
      then
        framework="spring"
      else
        echo "Wrong input"
      fi
  done

    if [[ "${framework}" = "quarkus" ]]
    then
      startQuarkusProject ${dbtype}
    elif [[ "${framework}" = "spring" ]]
    then
        if [[ -z "${package}" ]] && [[ -z "${mavenargs}"  ]]
        then 
          echo "No package or other parameter passed, we need atleast a package to create a spring application more information https://devonfw.com/website/pages/docs/cli.asciidoc.html#java.asciidoc_create" 
          read -r -p "Pass a package and if you want also other parameter von the examples: " mavenargs
        fi
      doMavenArchetype ${package} ${mavenargs} ${dbtype} ${artifactId}
    fi
    
    exit ${?}
}

function startQuarkusProject() {
local message='Please select your preferred extensions and set the project group-, artifactId-,
and version on the opened site https://code.quarkus.io/ or just press return
to use a configured Project from our Templates guides with some Extensions that we recommend' 
while [[ ! "$url" =~ ^https://code.quarkus.io/.* ]]
do
      echo -e "$message"
      read -r -p "(Copy the url and paste it here) The url has to start like this:https://code.quarkus.io/... or just press return to use our simple REST API template project" url
      if [[  -z "${url}" ]]; then 
        url="https://code.quarkus.io/?g=com.devonfw.quarkus&e=resteasy&e=resteasy-jackson&e=hibernate-validator&e=hibernate-orm"
        break
      fi
done


local artifact=$(echo "${url}" | grep -o 'a=[^\&]*')
if [[ -z "${artifact}" ]]
then 
  artifact="example"
  url="${url}&a=${artifact}"
else
 	artifact=${artifact:2}
fi  
local group=$(echo "${url}" | grep -o 'g=[^\&]*')
if [[ -z "${group}" ]]
then 
  group="com.devonfw.quarkus"
  url="${url}&g=${group}"
else
  group=${group:2}
fi

echo "project will be created in workspace/main folder"
local database_arr=(postgresql mariadb mysql h2 mssql db2 derby oracle dynamodb mongodb redis)
local database_extensions_arr=(e=jdbc-postgresql e=jdbc-mariadb e=jdbc-mysql e=jdbc-h2 e=jdbc-mssql e=jdbc-db2 e=jdbc-derby e=jdbc-oracle e=amazon-dynamodb e=mongodb-client e=redis-client)
local database_extension
if [[ -n "${1}" ]]
then 
for ((i=0; i< ${#database_arr[@]}; i++))
do 
  if [[ "${1}" == "${database_arr[${i}]}" ]]
  then 
    database_extension="${database_extensions_arr[${i}]}" 
    url+="&${database_extension}&e=hibernate-orm"
  fi
done
fi
if [[ -z "${database_extension}" ]]
then 
  doWarning "Dbtype ${1} is nnot supported, Project will still be created"
fi



subst=`expr substr $url 25 ${#url}`
url="https://code.quarkus.io/d${subst}"


if [[ -e "${DEVON_IDE_HOME}/updates/quarkus.zip" ]]
then 
  rm "${DEVON_IDE_HOME}/updates/quarkus.zip"
fi 
doDownload "${url}" "quarkus.zip" "${DEVON_IDE_HOME}/updates"

if [[ -d "${DEVON_IDE_HOME}/updates/extracted/example" ]]
then 
  rm -r "${DEVON_IDE_HOME}/updates/extracted/example"
fi 
doExtract "${DEVON_IDE_HOME}/updates/quarkus.zip"
rm "${DEVON_IDE_HOME}/updates/quarkus.zip"

local groupIdFolders="${group//[.]/"/"}"

doCreateModernProjectStructure ${artifact} ${PWD} ${groupIdFolders}

doMoveQuarkusFilesToModernStructure "${DEVON_IDE_HOME}/updates/extracted/${artifact}/" "${PWD}/${artifact}/"

## cleanup
rm -r "${DEVON_IDE_HOME}/updates/extracted/${artifact}"
}

function doMoveQuarkusFilesToModernStructure() {

## mv dockerfolder can be moved 
mv "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/main/docker" "${PWD}/${artifact}/src/main"
## resoruces folder can be moved
mv "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/main/resources" "${PWD}/${artifact}/src/main"

if [ -d "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/test/resources" ]
then 
  mv "${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/test/resources" "${PWD}/${artifact}/src/test/"
fi

mkdir -p "${PWD}/${artifact}/SomeFiles"
files=`eval find "${DEVON_IDE_HOME}/updates/extracted/${artifact}/*" -type f`
ServiceFiles=$(grep --with-filename '@Path' -r "${DEVON_IDE_HOME}/updates/extracted/${artifact}/")
if [[ -n $ServiceFiles ]]
then 
  mv ${ServiceFiles/:@Path*} "${PWD}/${artifact}/src/main/java/${groupIdFolders}/component/service/v1"
fi

TestFiles=`eval find '${DEVON_IDE_HOME}/updates/extracted/${artifact}/src/test/*' -type f`
if [[ -n $TestFiles ]]
then 
  mv ${TestFiles} "${PWD}/${artifact}/test/java/${groupIdFolders}/component/service/v1"
fi

projectFiles=`eval find "${DEVON_IDE_HOME}/updates/extracted/${artifact}/" -maxdepth 1 -type f `
if [[ -n $projectFiles ]]
then 
  mv ${projectFiles} "${DEVON_IDE_HOME}/updates/extracted/${artifact}/.mvn" "${PWD}/${artifact}/"
fi

otherFiles=`eval find "${DEVON_IDE_HOME}/updates/extracted/${artifact}/" -type f `
if [[ -n $otherFiles ]]
then 
  echo "We have found some Quarkus Files that couldn't assassinated to our project structure, we moved them into otherFiles Folder and you have to relocate them by yourself"
  mv ${otherFiles} "${PWD}/${artifact}/otherFiles"
fi
}


#1 artifactId
#2 path where the project will be created 
#3 groupId
function doCreateModernProjectStructure() {
local projectBasePath="${2}/${1}/src/main"
if [[ -d "${1}" ]]
then 
  doFail "The Project already exist, make sure to delete the existing project or rename your new project and run the comment again"
else
  mkdir -p "${projectBasePath}" "${projectBasePath}/helm" "${projectBasePath}/java" "${projectBasePath}/java/${3}/general/domain/model" 
  mkdir -p "${projectBasePath}java/${3}/component/domain/repo" "${projectBasePath}/java/${3}/component/domain/dao" "${projectBasePath}/java/${3}/component/domain/model"
  mkdir -p "${projectBasePath}/java/${3}/component/logic" "${projectBasePath}/java/${3}/component/service/v1/mapper" "${projectBasePath}/java/${3}/component/service/v1/model"
  mkdir -p "${projectBasePath}/java/${3}/component/service/v1"
fi
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Install and manage Java."
  echo
  echo "Arguments:"
  echo " setup                              setup Java (install and verify)"
  echo " create «args»                      create new Java project based on devon4j template. If a single argument is provided,"
  echo "                                    this is the package name and is automatically split into groupId and artifactId. Use"
  echo "                                    -DdbType=«db» to choose the database. Any option starting with dash is passed as is."
  echo " migrate [from «version»] [single]  update the current devon4j project to the latest supported version. If for some reasons"
  echo "                                    the current devonfw version (e.g. oasp4j:2.6.0) can not be auto-detected you may provide"
  echo "                                    it manually after the 'from' argument. Also the 'single' option allows to migrate only to"
  echo "                                    the next available version."
  echo " cicd «args»                        generate cicd files for the current project: $PWD"
  echo
  echo "Options:"
elif [ -z "${1}" ] || [ "${1}" = "setup" ]
then
  doSetup setup
elif [ "${1}" = "create" ]
then
  doSetup
  shift
  doCreate "${@}"
elif [ "${1}" = "migrate" ]
then
  shift
  doMigrate "${@}"
elif [ "${1}" = "cicd" ]
then
  shift
  doDevonCommand cicdgen java "${*}"
else
  doFail "Unknown argument ${1}"
fi
